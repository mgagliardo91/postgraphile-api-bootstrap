"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  initializeTenant(slug: String!): Boolean

  """Updates a single `Tenant` using a unique key and a patch."""
  updateTenant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantInput!
  ): UpdateTenantPayload

  """Updates a single `Tenant` using a unique key and a patch."""
  updateTenantByLegacyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantByLegacyIdInput!
  ): UpdateTenantPayload

  """Updates a single `Tenant` using its globally unique id and a patch."""
  updateTenantByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantByNodeIdInput!
  ): UpdateTenantPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  tenant(slug: String!): Tenant
  tenantByLegacyId(legacyId: UUID!): Tenant

  """Reads a single `Tenant` using its globally unique `ID`."""
  tenantByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tenant`."""
    nodeId: ID!
  ): Tenant

  """Reads and enables pagination through a set of `Tenant`."""
  tenants(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TenantFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tenant`."""
    orderBy: [TenantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantsConnection
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

type Tenant implements Node {
  legacyId: UUID
  nionicEnabled: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slug: String!
}

type TenantAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: TenantDistinctCountAggregates
  keys: [String!]
}

"""
A condition to be used against `Tenant` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TenantCondition {
  """Checks for equality with the object’s `legacyId` field."""
  legacyId: UUID

  """Checks for equality with the object’s `nionicEnabled` field."""
  nionicEnabled: Boolean

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

type TenantDistinctCountAggregates {
  """Distinct count of legacyId across the matching connection"""
  legacyId: BigInt

  """Distinct count of nionicEnabled across the matching connection"""
  nionicEnabled: BigInt

  """Distinct count of slug across the matching connection"""
  slug: BigInt
}

"""
A filter to be used against `Tenant` object types. All fields are combined with a logical ‘and.’
"""
input TenantFilter {
  """Checks for all expressions in this list."""
  and: [TenantFilter!]

  """Filter by the object’s `legacyId` field."""
  legacyId: UUIDFilter

  """Filter by the object’s `nionicEnabled` field."""
  nionicEnabled: BooleanFilter

  """Negates the expression."""
  not: TenantFilter

  """Checks for any expressions in this list."""
  or: [TenantFilter!]

  """Filter by the object’s `slug` field."""
  slug: StringFilter
}

"""
Represents an update to a `Tenant`. Fields that are set will be updated.
"""
input TenantPatch {
  nionicEnabled: Boolean
  slug: String
}

"""A connection to a list of `Tenant` values."""
type TenantsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: TenantAggregates

  """
  A list of edges which contains the `Tenant` and cursor to aid in pagination.
  """
  edges: [TenantsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Tenant` for these aggregates."""
    groupBy: [TenantsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: TenantsHavingInput
  ): [TenantAggregates!]

  """A list of `Tenant` objects."""
  nodes: [Tenant!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tenant` you could get from the connection."""
  totalCount: Int!
}

"""A `Tenant` edge in the connection."""
type TenantsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tenant` at the end of the edge."""
  node: Tenant!
}

"""Grouping methods for `Tenant` for usage during aggregation."""
enum TenantsGroupBy {
  NIONIC_ENABLED
}

"""Conditions for `Tenant` aggregates."""
input TenantsHavingInput {
  AND: [TenantsHavingInput!]
  OR: [TenantsHavingInput!]
}

"""Methods to use when ordering `Tenant`."""
enum TenantsOrderBy {
  LEGACY_ID_ASC
  LEGACY_ID_DESC
  NATURAL
  NIONIC_ENABLED_ASC
  NIONIC_ENABLED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateTenantByLegacyId` mutation."""
input UpdateTenantByLegacyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  legacyId: UUID!

  """
  An object where the defined keys will be set on the `Tenant` being updated.
  """
  patch: TenantPatch!
}

"""All input for the `updateTenantByNodeId` mutation."""
input UpdateTenantByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tenant` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tenant` being updated.
  """
  patch: TenantPatch!
}

"""All input for the `updateTenant` mutation."""
input UpdateTenantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tenant` being updated.
  """
  patch: TenantPatch!
  slug: String!
}

"""The output of our update `Tenant` mutation."""
type UpdateTenantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tenant` that was updated by this mutation."""
  tenant: Tenant

  """An edge for our `Tenant`. May be used by Relay 1."""
  tenantEdge(
    """The method to use when ordering `Tenant`."""
    orderBy: [TenantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantsEdge
}
