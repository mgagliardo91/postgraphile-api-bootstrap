name: Deploy

on:
  release:
    types: [released]
  workflow_run:
    workflows: ['CI']
    branches: [staging]
    types: [completed]

env:
  BRANCH: ${{ github.event_name == 'release' && 'main' || 'staging' }}
  ENV: ${{ github.event_name == 'release' && 'prod' || 'staging' }}

concurrency:
  group: "deploy-${{ github.event_name == 'release' && 'prod' || 'staging' }}"
  cancel-in-progress: false

jobs:
  version:
    runs-on: [self-hosted, ndustrial-runner-small]
    if: ${{ github.event_name == 'release' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: '0'
      - name: Get tag
        run: echo "TAG=$(git describe --tags --dirty)" >> $GITHUB_ENV
    outputs:
      tag: ${{ env.TAG }}

  docker:
    runs-on: [self-hosted, ndustrial-runner-small]
    needs: version
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      - uses: docker/setup-qemu-action@v2
      - run: docker context create builders
      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders
      - uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.NIO_QUAY_USERNAME }}
          password: ${{ secrets.NIO_QUAY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: quay.io/ndustrialio/nio-internal-api:${{ needs.version.outputs.tag }},quay.io/ndustrialio/nio-internal-api:${{ env.ENV == 'prod' && 'latest' || 'staging'}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  k8s:
    runs-on: [self-hosted, ndustrial-runner-small]
    needs: [version, docker]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      - name: Deploy ${{ env.ENV }}
        uses: ndustrialio/actions/helm-upgrade@main
        with:
          kubeconfig: ${{ secrets[format('KUBECONFIG_NIONIC_{0}', env.ENV)] }}
          namespace: nionic-${{ env.ENV }}
          tag: ${{ needs.version.outputs.tag }}
          env: ${{ env.ENV }}
          chart: nio-api
          chart-version: '1.0.8'

  all-deployed:
    if: always()
    needs: [k8s]
    runs-on: [self-hosted, ndustrial-runner-small]
    steps:
    - uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
